{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Start","text":""},{"location":"index.html#introduction","title":"Introduction","text":"<p>This is collection of samples that can be used with the B&amp;R IoT device X20EDSxxxx.</p>"},{"location":"appendix.html","title":"Appendix","text":""},{"location":"appendix.html#appendix","title":"Appendix","text":"<p>Software tested V1.6.0</p>"},{"location":"appendix.html#links","title":"Links","text":"<ul> <li> <p>X20EDS410 | B&amp;R Industrial Automation</p> </li> <li> <p>How to use SSH in VS code</p> </li> </ul>"},{"location":"appendix.html#known-issues","title":"Known issues","text":"<ul> <li>When you update the image with sudo apt-get the docker is updated to version 28.0.0. With this version, the docker will no longer start. The problem is most likely this issue on Github: 28.0.0: Cannot start with iptables=true \u00b7 Issue #49505 \u00b7 moby/moby </li> </ul> <p>To downgrade and freeze the version to 27.1.2, you can use the following commands:</p> <pre><code>sudo apt-get install docker-ce=5:27.1.2-1~debian.12~bookworm docker-ce-cli=5:27.1.2-1~debian.12~bookworm containerd.io\nsudo apt-mark hold docker-ce docker-ce-cli containerd.io\nsudo systemctl restart docker\n</code></pre>"},{"location":"appendix.html#tested-containers","title":"Tested Containers","text":"Name Success Command portainer Yes docker volume create portainer_datadocker run -d -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest node red Yes docker run -it -p 1880:1880 --name mynodered nodered/node-red mysql Yes docker run -p 3306:3306 --name mysql-container -e MYSQL_ROOT_PASSWORD=my-secret-pw -v mysql-data:/var/lib/mysql -d mysql:latest"},{"location":"appendix.html#useful-tools-to-install-on-the-target","title":"Useful tools to install on the target","text":"Name Command pipx sudo apt install pipx"},{"location":"appendix.html#useful-vscode-extensions","title":"Useful vscode extensions","text":"Name Marketplace MySql Database Client JDBC - Visual Studio Marketplace Remote SSH Remote - SSH - Visual Studio Marketplace"},{"location":"appendix.html#useful-commands","title":"Useful commands","text":"Description Command Show IP addresses ip addr showhostname -I"},{"location":"revision.html","title":"Revision","text":""},{"location":"revision.html#26022025","title":"26.02.2025","text":"<p>First release</p>"},{"location":"samples/opc2database.html","title":"OPC UA to SQL Data Logger","text":"<p>This script connects to an OPC UA server, reads variable values, and logs them into a MySQL database. The variable names and types are read from a <code>varlist.txt</code> file.</p>"},{"location":"samples/opc2database.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.x</li> <li><code>opcua</code> library</li> <li><code>mysql-connector-python</code> library</li> <li>MySQL server</li> </ul>"},{"location":"samples/opc2database.html#installation","title":"Installation","text":"<ol> <li> <p>Install the required Python libraries:     <code>sh     pip install opcua mysql-connector-python</code></p> </li> <li> <p>Ensure you have a MySQL server running and accessible.</p> </li> </ol>"},{"location":"samples/opc2database.html#configuration","title":"Configuration","text":"<ol> <li> <p>OPC UA Server URL: Update the <code>OPC_UA_SERVER</code> variable with the URL of your OPC UA server.     <code>python     OPC_UA_SERVER = \"opc.tcp://192.168.30.108:4840\"</code></p> </li> <li> <p>Variable Namespace: Update the <code>VAR_NAMESPACE</code> variable with the namespace of your OPC UA server.     <code>python     VAR_NAMESPACE = \"urn:B&amp;R/pv/\"</code></p> </li> <li> <p>Polling Interval: Set the polling interval in seconds.     <code>python     POLLING_INTERVAL = 60</code></p> </li> <li> <p>MySQL Database Connection: Update the MySQL connection details.     <code>python     db_connection = mysql.connector.connect(         host=\"192.168.1.1\",         user=\"root\",         password=\"bur\",         database=\"data\"     )</code></p> </li> </ol>"},{"location":"samples/opc2database.html#variable-list","title":"Variable list","text":"<p>Create a <code>varlist.txt</code> file in the same directory as the script. This file should contain the variable names and their types, separated by a semicolon (<code>;</code>). Lines starting with <code>#</code> are treated as comments.</p> <p>Example:</p> <pre><code># VariableName;Type\nTemperature;FLOAT\nPressure;FLOAT\n</code></pre>"},{"location":"samples/opc2database.html#script-workflow","title":"Script Workflow","text":"<ol> <li>Read Variable Names and Types: The script reads variable names and types from <code>varlist.txt</code>.</li> <li>Connect to OPC UA Server: The script connects to the OPC UA server using the provided URL.</li> <li>List Namespaces: The script lists all namespaces available on the OPC UA server.</li> <li>Get Namespace Index: The script retrieves the namespace index for the specified namespace.</li> <li>Create Node IDs and Nodes: The script creates node IDs and nodes for each variable.</li> <li>Connect to MySQL Database: The script connects to the MySQL database.</li> <li>Check and Create Columns: The script checks if columns exist in the database table and creates them if they don't.</li> <li>Read and Log Values: The script reads the values of the nodes cyclically and logs them into the MySQL database.</li> <li>Error Handling: The script handles any errors that occur during the process.</li> <li>Disconnect: The script disconnects from the OPC UA server and MySQL database when finished.</li> </ol>"},{"location":"samples/opc2database.html#error-handling","title":"Error Handling","text":"<p>The script includes basic error handling to catch and print exceptions that occur during the connection, reading, and logging processes.</p>"}]}